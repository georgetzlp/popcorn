diff --git a/electron.d.ts b/electron.d.ts
index 28ff3afa052ee39f4f43f47a62d485f46c3d1cd3..3a0fc086585479ef55156a14f292c7c7d01be9ba 100644
--- a/electron.d.ts
+++ b/electron.d.ts
@@ -1,10 +1,24 @@
-// Type definitions for Electron 30.0.1
+// Type definitions for Electron 30.0.1 (patched)
 // Project: http://electronjs.org/
 // Definitions by: The Electron Team <https://github.com/electron/electron>
 // Definitions: https://github.com/electron/typescript-definitions
 
 /// <reference types="node" />
 
+declare namespace $PopcornInternals {
+  type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;
+  type ReturnType<T> = T | Awaited<T> | Promise<Awaited<T>>;
+  type ForceArr<T> = T extends any[] ? T : [T];
+  type KeysOfValue<T, U> = { [K in keyof T]: T[K] extends U ? K : never }[keyof T];
+  type FilterKeys<T, U> = { [K in KeysOfValue<T, U>]: T[K] };
+
+  // Using the import keyword does not work for some reason so I need to do it like this instead
+  type MapKeys<T> = { [K in keyof T as import('../../../../../types/index.ts').EventName<K & string>]: T[K] };
+  type MappedAPI = MapKeys<FilterKeys<import('../../../../../types/index.ts').ElectronAPI, Function>>;
+  type MappedMainAPI = MapKeys<import('../../../../../types/index.ts').MainAPI>;
+}
+
+
 type DOMEvent = Event;
 type GlobalResponse = Response;
 type GlobalRequest = Request;
@@ -8155,38 +8169,58 @@ declare namespace Electron {
      * are serialized and only the `message` property from the original error is
      * provided to the renderer process. Please refer to #24427 for details.
      */
-    handle(channel: string, listener: (event: IpcMainInvokeEvent, ...args: any[]) => (Promise<any>) | (any)): void;
+    handle<K extends keyof $PopcornInternals.MappedAPI>(
+      channel: K,
+      listener: $PopcornInternals.MappedAPI[K] extends (...args: infer Args) => infer Ret
+        ? (event: IpcMainInvokeEvent, ...args: Args) => $PopcornInternals.ReturnType<NonNullable<Ret>>
+        : never,
+    ): void;
     /**
      * Handles a single `invoke`able IPC message, then removes the listener. See
      * `ipcMain.handle(channel, listener)`.
      */
-    handleOnce(channel: string, listener: (event: IpcMainInvokeEvent, ...args: any[]) => (Promise<any>) | (any)): void;
+    handleOnce<K extends keyof $PopcornInternals.MappedAPI>(
+      channel: K,
+      listener: $PopcornInternals.MappedAPI[K] extends (...args: infer Args) => infer Ret
+        ? (event: IpcMainInvokeEvent, ...args: Args) => $PopcornInternals.ReturnType<NonNullable<Ret>>
+        : never,
+    ): void;
     /**
      * Listens to `channel`, when a new message arrives `listener` would be called with
      * `listener(event, args...)`.
      */
-    on(channel: string, listener: (event: IpcMainEvent, ...args: any[]) => void): this;
+    on<K extends keyof $PopcornInternals.MappedAPI>(
+      channel: K,
+      listener: $PopcornInternals.MappedAPI[K] extends (...args: infer Args) => infer Ret
+        ? (event: IpcMainEvent<Awaited<Ret>>, ...args: Args) => void
+        : never,
+    ): this;
     /**
      * Adds a one time `listener` function for the event. This `listener` is invoked
      * only the next time a message is sent to `channel`, after which it is removed.
      */
-    once(channel: string, listener: (event: IpcMainEvent, ...args: any[]) => void): this;
+    once<K extends keyof $PopcornInternals.MappedAPI>(
+      channel: K,
+      listener: $PopcornInternals.MappedAPI[K] extends (...args: infer Args) => infer Ret
+        ? (event: IpcMainEvent<Awaited<Ret>>, ...args: Args) => void
+        : never,
+    ): this;
     /**
      * Removes listeners of the specified `channel`.
      */
-    removeAllListeners(channel?: string): this;
+    removeAllListeners(channel?: keyof $PopcornInternals.MappedAPI): this;
     /**
      * Removes any handler for `channel`, if present.
      */
-    removeHandler(channel: string): void;
+    removeHandler(channel: keyof $PopcornInternals.MappedAPI): void;
     /**
      * Removes the specified `listener` from the listener array for the specified
      * `channel`.
      */
-    removeListener(channel: string, listener: (...args: any[]) => void): this;
+    removeListener(channel: keyof $PopcornInternals.MappedAPI, listener: (...args: any[]) => void): this;
   }
 
-  interface IpcMainEvent extends Event {
+  interface IpcMainEvent<T = any> extends Event {
 
     // Docs: https://electronjs.org/docs/api/structures/ipc-main-event
 
@@ -8208,11 +8242,11 @@ declare namespace Electron {
      * "reply" to the sent message in order to guarantee the reply will go to the
      * correct process and frame.
      */
-    reply: (channel: string, ...args: any[]) => void;
+    reply<K extends keyof $PopcornInternals.MappedMainAPI>(channel: K, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>): void;
     /**
      * Set this to the value to be returned in a synchronous message
      */
-    returnValue: any;
+    returnValue: T;
     /**
      * Returns the `webContents` that sent the message
      */
@@ -8254,7 +8288,10 @@ declare namespace Electron {
     /**
      * Alias for `ipcRenderer.on`.
      */
-    addListener(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
+    addListener<K extends keyof $PopcornInternals.MappedMainAPI>(
+      channel: K,
+      listener: (event: IpcRendererEvent, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>) => void,
+    ): this;
     /**
      * Resolves with the response from the main process.
      *
@@ -8285,22 +8322,30 @@ declare namespace Electron {
      * returned by `invoke` will reject. However, the `Error` object in the renderer
      * process will not be the same as the one thrown in the main process.
      */
-    invoke(channel: string, ...args: any[]): Promise<any>;
+    invoke<K extends keyof $PopcornInternals.MappedAPI>(channel: K, ...args: $PopcornInternals.Parameters<$PopcornInternals.MappedAPI[K]>): Promise<Awaited<ReturnType<$PopcornInternals.MappedAPI[K]>>>;
     /**
      * Alias for `ipcRenderer.removeListener`.
      */
-    off(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
+    off(channel: keyof $PopcornInternals.MappedMainAPI, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
     /**
      * Listens to `channel`, when a new message arrives `listener` would be called with
      * `listener(event, args...)`.
      */
-    on(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
+    on<K extends keyof $PopcornInternals.MappedMainAPI>(
+      channel: K,
+      listener: (event: IpcRendererEvent, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>) => void,
+    ): this;
     /**
      * Adds a one time `listener` function for the event. This `listener` is invoked
      * only the next time a message is sent to `channel`, after which it is removed.
      */
-    once(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
+    once<K extends keyof $PopcornInternals.MappedMainAPI>(
+      channel: K,
+      listener: (event: IpcRendererEvent, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>) => void,
+    ): this;
     /**
+     * @warning Not typed properly
+     *
      * Send a message to the main process, optionally transferring ownership of zero or
      * more `MessagePort` objects.
      *
@@ -8317,12 +8362,12 @@ declare namespace Electron {
     /**
      * Removes all listeners, or those of the specified `channel`.
      */
-    removeAllListeners(channel: string): this;
+    removeAllListeners(channel?: keyof $PopcornInternals.MappedMainAPI): this;
     /**
      * Removes the specified `listener` from the listener array for the specified
      * `channel`.
      */
-    removeListener(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
+    removeListener(channel: keyof $PopcornInternals.MappedMainAPI, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;
     /**
      * Send an asynchronous message to the main process via `channel`, along with
      * arguments. Arguments will be serialized with the Structured Clone Algorithm,
@@ -8347,7 +8392,7 @@ declare namespace Electron {
      * If you want to receive a single response from the main process, like the result
      * of a method call, consider using `ipcRenderer.invoke`.
      */
-    send(channel: string, ...args: any[]): void;
+    send<K extends keyof $PopcornInternals.MappedAPI>(channel: K, ...args: $PopcornInternals.Parameters<$PopcornInternals.MappedAPI[K]>): void;
     /**
      * The value sent back by the `ipcMain` handler.
      *
@@ -8372,12 +8417,12 @@ declare namespace Electron {
      * renderer process until the reply is received, so use this method only as a last
      * resort. It's much better to use the asynchronous version, `invoke()`.
      */
-    sendSync(channel: string, ...args: any[]): any;
+    sendSync<K extends keyof $PopcornInternals.MappedAPI>(channel: K, ...args: $PopcornInternals.Parameters<$PopcornInternals.MappedAPI[K]>): ReturnType<$PopcornInternals.MappedAPI[K]>;
     /**
      * Like `ipcRenderer.send` but the event will be sent to the `<webview>` element in
      * the host page instead of the main process.
      */
-    sendToHost(channel: string, ...args: any[]): void;
+    sendToHost<K extends keyof $PopcornInternals.MappedAPI>(channel: K, ...args: $PopcornInternals.Parameters<$PopcornInternals.MappedAPI[K]>): void;
   }
 
   interface IpcRendererEvent extends Event {
@@ -16192,7 +16237,7 @@ declare namespace Electron {
      *
      * For additional reading, refer to Electron's IPC guide.
      */
-    send(channel: string, ...args: any[]): void;
+    send<K extends keyof $PopcornInternals.MappedMainAPI>(channel: K, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>): void;
     /**
      * Sends an input `event` to the page. **Note:** The `BrowserWindow` containing the
      * contents needs to be focused for `sendInputEvent()` to work.
@@ -16476,6 +16521,22 @@ declare namespace Electron {
      * respectively. The formula for this is `scale := 1.2 ^ level`.
      */
     zoomLevel: number;
+    /**
+     * @patched - this was added by popcorn
+     * An object containing info about the original preload
+     */
+    originalWindowData?: {
+      originalPreload: string;
+      windowOptions: Electron.BrowserWindowConstructorOptions;
+    };
+    /**
+     * @patched - this was added by kernel
+     * An object containing info about the original preload
+     */
+    kernelWindowData?: {
+      originalPreload: string;
+      windowOptions: Electron.BrowserWindowConstructorOptions;
+    };
   }
 
   class WebContentsView extends View {
@@ -16750,7 +16811,7 @@ declare namespace Electron {
      * The renderer process can handle the message by listening to `channel` with the
      * `ipcRenderer` module.
      */
-    send(channel: string, ...args: any[]): void;
+    send<K extends keyof $PopcornInternals.MappedMainAPI>(channel: K, ...args: $PopcornInternals.ForceArr<$PopcornInternals.MappedMainAPI[K]>): void;
     /**
      * A `WebFrameMain[]` collection containing the direct descendents of `frame`.
      *
@@ -23209,40 +23270,40 @@ declare namespace Electron {
 
 }
 
-declare module 'electron' {
+declare module 'electron-latest' {
   export = Electron.CrossProcessExports;
 }
 
-declare module 'electron/main' {
+declare module 'electron-latest/main' {
   export = Electron.Main;
 }
 
-declare module 'electron/common' {
+declare module 'electron-latest/common' {
   export = Electron.Common;
 }
 
-declare module 'electron/renderer' {
+declare module 'electron-latest/renderer' {
   export = Electron.Renderer;
 }
 
-declare module 'electron/utility' {
+declare module 'electron-latest/utility' {
   export = Electron.Utility;
 }
 
 interface NodeRequireFunction {
-  (moduleName: 'electron'): typeof Electron.CrossProcessExports;
-  (moduleName: 'electron/main'): typeof Electron.Main;
-  (moduleName: 'electron/common'): typeof Electron.Common;
-  (moduleName: 'electron/renderer'): typeof Electron.Renderer;
-  (moduleName: 'electron/utility'): typeof Electron.Utility;
+  (moduleName: 'electron-latest'): typeof Electron.CrossProcessExports;
+  (moduleName: 'electron-latest/main'): typeof Electron.Main;
+  (moduleName: 'electron-latest/common'): typeof Electron.Common;
+  (moduleName: 'electron-latest/renderer'): typeof Electron.Renderer;
+  (moduleName: 'electron-latest/utility'): typeof Electron.Utility;
 }
 
 interface NodeRequire {
-  (moduleName: 'electron'): typeof Electron.CrossProcessExports;
-  (moduleName: 'electron/main'): typeof Electron.Main;
-  (moduleName: 'electron/common'): typeof Electron.Common;
-  (moduleName: 'electron/renderer'): typeof Electron.Renderer;
-  (moduleName: 'electron/utility'): typeof Electron.Utility;
+  (moduleName: 'electron-latest'): typeof Electron.CrossProcessExports;
+  (moduleName: 'electron-latest/main'): typeof Electron.Main;
+  (moduleName: 'electron-latest/common'): typeof Electron.Common;
+  (moduleName: 'electron-latest/renderer'): typeof Electron.Renderer;
+  (moduleName: 'electron-latest/utility'): typeof Electron.Utility;
 }
 
 interface File {
