/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

import { type Static, Type } from '@sinclair/typebox';
import { TypeCompiler } from '@sinclair/typebox/compiler';

// ! There are no string formats because they don't work idk
export type Release = Static<typeof Release>;
export const Release = Type.Object(
  {
    url: Type.String(),
    html_url: Type.String(),
    assets_url: Type.String(),
    upload_url: Type.String(),
    tarball_url: Type.Union([
      Type.String(),
      Type.Null(),
    ]),
    zipball_url: Type.Union([
      Type.String(),
      Type.Null(),
    ]),
    id: Type.Number(),
    node_id: Type.String(),
    tag_name: Type.String({
      description: 'The name of the tag.',
      examples: ['v1.0.0'],
    }),
    target_commitish: Type.String({
      description: 'Specifies the commitish value that determines where the Git tag is created from.',
      examples: ['master'],
    }),
    name: Type.Union([Type.String(), Type.Null()]),
    body: Type.Optional(Type.Union([Type.String(), Type.Null()])),
    draft: Type.Boolean({
      description: 'true to create a draft (unpublished) release, false to create a published one.',
      examples: [false],
    }),
    prerelease: Type.Boolean({
      description: 'Whether to identify the release as a prerelease or a full release.',
      examples: [false],
    }),
    created_at: Type.String(),
    published_at: Type.Union([
      Type.String(),
      Type.Null(),
    ]),
    author: Type.Object(
      {
        name: Type.Optional(Type.Union([Type.String(), Type.Null()])),
        email: Type.Optional(Type.Union([Type.String(), Type.Null()])),
        login: Type.String({ examples: ['octocat'] }),
        id: Type.Number({ examples: [1] }),
        node_id: Type.String({ examples: ['MDQ6VXNlcjE='] }),
        avatar_url: Type.String({
          examples: ['https://github.com/images/error/octocat_happy.gif'],
        }),
        gravatar_id: Type.Union([
          Type.String({ examples: ['41d064eb2195891e12d0413f63227ea7'] }),
          Type.Null({ examples: ['41d064eb2195891e12d0413f63227ea7'] }),
        ]),
        url: Type.String({
          examples: ['https://api.github.com/users/octocat'],
        }),
        html_url: Type.String({
          examples: ['https://github.com/octocat'],
        }),
        followers_url: Type.String({
          examples: ['https://api.github.com/users/octocat/followers'],
        }),
        following_url: Type.String({
          examples: ['https://api.github.com/users/octocat/following{/other_user}'],
        }),
        gists_url: Type.String({
          examples: ['https://api.github.com/users/octocat/gists{/gist_id}'],
        }),
        starred_url: Type.String({
          examples: ['https://api.github.com/users/octocat/starred{/owner}{/repo}'],
        }),
        subscriptions_url: Type.String({
          examples: ['https://api.github.com/users/octocat/subscriptions'],
        }),
        organizations_url: Type.String({
          examples: ['https://api.github.com/users/octocat/orgs'],
        }),
        repos_url: Type.String({
          examples: ['https://api.github.com/users/octocat/repos'],
        }),
        events_url: Type.String({
          examples: ['https://api.github.com/users/octocat/events{/privacy}'],
        }),
        received_events_url: Type.String({
          examples: ['https://api.github.com/users/octocat/received_events'],
        }),
        type: Type.String({ examples: ['User'] }),
        site_admin: Type.Boolean(),
        starred_at: Type.Optional(
          Type.String({ examples: ['"2020-07-09T00:17:55Z"'] }),
        ),
      },
      { description: 'A GitHub user.' },
    ),
    assets: Type.Array(
      Type.Object(
        {
          url: Type.String(),
          browser_download_url: Type.String(),
          id: Type.Number(),
          node_id: Type.String(),
          name: Type.String({
            description: 'The file name of the asset.',
            examples: ['Team Environment'],
          }),
          label: Type.Union([Type.String(), Type.Null()]),
          state: Type.Union([Type.Literal('uploaded'), Type.Literal('open')], {
            description: 'State of the release asset.',
          }),
          content_type: Type.String(),
          size: Type.Number(),
          download_count: Type.Number(),
          created_at: Type.String(),
          updated_at: Type.String(),
          uploader: Type.Union([
            Type.Null(),
            Type.Object(
              {
                name: Type.Optional(Type.Union([Type.String(), Type.Null()])),
                email: Type.Optional(Type.Union([Type.String(), Type.Null()])),
                login: Type.String({ examples: ['octocat'] }),
                id: Type.Number({ examples: [1] }),
                node_id: Type.String({ examples: ['MDQ6VXNlcjE='] }),
                avatar_url: Type.String({
                  examples: ['https://github.com/images/error/octocat_happy.gif'],
                }),
                gravatar_id: Type.Union([
                  Type.String({
                    examples: ['41d064eb2195891e12d0413f63227ea7'],
                  }),
                  Type.Null({ examples: ['41d064eb2195891e12d0413f63227ea7'] }),
                ]),
                url: Type.String({
                  examples: ['https://api.github.com/users/octocat'],
                }),
                html_url: Type.String({
                  examples: ['https://github.com/octocat'],
                }),
                followers_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/followers'],
                }),
                following_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/following{/other_user}'],
                }),
                gists_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/gists{/gist_id}'],
                }),
                starred_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/starred{/owner}{/repo}'],
                }),
                subscriptions_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/subscriptions'],
                }),
                organizations_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/orgs'],
                }),
                repos_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/repos'],
                }),
                events_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/events{/privacy}'],
                }),
                received_events_url: Type.String({
                  examples: ['https://api.github.com/users/octocat/received_events'],
                }),
                type: Type.String({ examples: ['User'] }),
                site_admin: Type.Boolean(),
                starred_at: Type.Optional(
                  Type.String({ examples: ['"2020-07-09T00:17:55Z"'] }),
                ),
              },
              { description: 'A GitHub user.' },
            ),
          ]),
        },
        { description: 'Data related to a release.' },
      ),
    ),
    body_html: Type.Optional(Type.String()),
    body_text: Type.Optional(Type.String()),
    mentions_count: Type.Optional(Type.Number()),
    discussion_url: Type.Optional(
      Type.String({
        description: 'The URL of the release discussion.',
      }),
    ),
    reactions: Type.Optional(
      Type.Object({
        'url': Type.String(),
        'total_count': Type.Number(),
        '+1': Type.Number(),
        '-1': Type.Number(),
        'laugh': Type.Number(),
        'confused': Type.Number(),
        'heart': Type.Number(),
        'hooray': Type.Number(),
        'eyes': Type.Number(),
        'rocket': Type.Number(),
      }),
    ),
  },
  { description: 'A release.', $id: 'Release' },
);

export const ReleaseChecker = TypeCompiler.Compile(Release);
